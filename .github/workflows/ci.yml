name: CI 
on:
  pull_request:
    branches: [develop]

  push:
    branches: [develop]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 

      - name: Cache node_modules    # put before ci to restore the cache before installing dependencies by ci
        uses: actions/cache@v1
        with:
          path: ~/.npm              # Differes depending on Operating System (os) and the Package Manager you are using 
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}  # use dynamic value so it can generate new cache depending on something new, 
                                    # eg when npm dependencies are changed new cache will be generated. npm dependencies are stored in package-lock.json file
          restore_keys: |  # Restore keys are extra keys that github uses to search for caches if can not find caches using the key above
            ${{ runner.os }}-node-

      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - run: npm ci                     # Similar to npm install but more proper for CI environments https://docs.npmjs.com/cli/v8/commands/npm-ci
      - run: npm run format:check       # Runs Code Formatting 
      - run: npm test -- --coverage     # Generates Code test coverage , in next step ( Build Project ) workflow Code Coverage will be uploaded as an Artifact
        env:
          CI: true                      # To avoid interactive terminal environment
      
      - name: Upload Test Coverage      # This step ( upload artifact) should run after test step
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: coverage 
      
      - name: Build Project
        if: github.event_name == 'push'    # runs if pull request is approved and merged so we can build 
        run:  npm run build

      - name: Upload Build Folder      
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

      - uses: actions/download-artifact  # Takes name of the artifact and download it to the workspace

      - name: Deploy to Staging
        if: github.event_name == 'push' 
        run: npx surge --project ./build  --domain silent-apparatus.surge.sh  # dimain given by surge, if you forgot it you can find using command: surge list. dmain entered manually to avoide interactive command.
        env:                                        # Enter username and password in secrets to login surge manually
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}  # if you forgot the given username, you can enter this command: surge whoami
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}  # if you forgot the given token, you can enter this command: surge token